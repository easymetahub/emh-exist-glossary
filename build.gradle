import org.apache.tools.ant.filters.BaseFilterReader
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.xqdoc:xqdoc:1.9.9"
    }
}

repositories {
  jcenter()
}

class XQDocFilter extends BaseFilterReader {
    XQDocFilter(Reader input) {
        super(new StringReader(new org.xqdoc.ExistDBProcessor().process(input.text)))
    }
}

/**
 * Polymer 
 */

task npmInstall(type: Exec) {
    String npm = 'npm';
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        npm = 'npm.cmd'
    }
    workingDir 'src/main/polymer'
    commandLine npm, 'install'
}

task polymerBuild(type: Exec) {
    String polymer = 'polymer';
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        polymer = 'polymer.cmd'
    }
    workingDir 'src/main/polymer'
    commandLine polymer, 'build'
}

task copyPolymer(type: Copy) {
  into 'build/default'
  from 'src/main/polymer/build/default'
}

task copyModules(type: Copy) {
  into 'build/default'
  from 'src/main/xquery'
}

task copyResources(type: Copy) {
  into 'build/default'
  from 'src/main/resources'
}

task generateXQDocs(type: Copy) {
  into 'xqDoc'
  from 'src/main/xquery'
  include '**/*.xq*'
  rename { it - '.xq*' + '.xml' } 
  includeEmptyDirs = false
  eachFile { println it }
  filter XQDocFilter
}

def xqDocTree = fileTree(dir:'xqDoc', excludes:['openapi.json'])
task fsTeardownXQDocs(type: Delete) {
  delete xqDocTree
}

task buildXAR(type: Zip) {
   from 'build/default/'
   include '*'
   include '*/**' //to include contents of a folder present inside build/default directory
   archiveName 'emh-glossary-0.8.0.xar'
   destinationDir(file('build/'))
}



// Task dependencies
buildXAR.dependsOn copyPolymer
buildXAR.dependsOn copyModules
buildXAR.dependsOn copyResources
copyPolymer.dependsOn polymerBuild
polymerBuild.dependsOn npmInstall



generateXQDocs.mustRunAfter(fsTeardownXQDocs)

